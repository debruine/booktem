{
  "hash": "780a5b1d52ba1fe3982cf5d315bbaad3",
  "result": {
    "markdown": "---\ntitle: \"Webexercises\"\n---\n\n\n\n\nThis is a Web Exercise template created by the [psychology teaching team at the University of Glasgow](http://www.psy.gla.ac.uk), based on ideas from [Software Carpentry](https://software-carpentry.org/lessons/). This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\n\nThe `{webexercises}` package provides a number of functions that you use in [inline R code](https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf) or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\n\n**NOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser.**\n\n## Example Questions\n\n### Fill-In-The-Blanks (`fitb()`)\n\nCreate fill-in-the-blank questions using `fitb()`, providing the answer as the first argument.\n\n- 2 + 2 is <input class='webex-solveme nospaces' size='1' data-answer='[\"4\"]'/>\n\nYou can also create these questions dynamically, using variables from your R session.\n\n\n::: {.cell}\n\n:::\n\n\n- The square root of 36 is: <input class='webex-solveme nospaces' size='1' data-answer='[\"6\"]'/>\n\nThe blanks are case-sensitive; if you don't care about case, use the argument `ignore_case = TRUE`.\n\n- What is the letter after D? <input class='webex-solveme nospaces ignorecase' size='1' data-answer='[\"E\"]'/>\n\nIf you want to ignore differences in whitespace use, use the argument `ignore_ws = TRUE` (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\n- How do you load the tidyverse package? <input class='webex-solveme nospaces' size='20' data-answer='[\"library( tidyverse )\",\"library( \\\"tidyverse\\\" )\",\"library( &apos;tidyverse&apos; )\"]'/>\n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\n- Type a vowel: <input class='webex-solveme nospaces ignorecase' size='1' data-answer='[\"A\",\"E\",\"I\",\"O\",\"U\"]'/>\n\nYou can use regular expressions to test answers against more complex rules.\n\n- Type any 3 letters: <input class='webex-solveme nospaces regex' size='3' data-answer='[\"^[a-zA-Z]{3}$\"]'/>\n\n### Multiple Choice (`mcq()`)\n\n- \"Never gonna give you up, never gonna: <select class='webex-select'><option value='blank'></option><option value=''>let you go</option><option value=''>turn you down</option><option value=''>run away</option><option value='answer'>let you down</option></select>\"\n- \"I <select class='webex-select'><option value='blank'></option><option value='answer'>bless the rains</option><option value=''>guess it rains</option><option value=''>sense the rain</option></select> down in Africa\" -Toto\n\n### True or False (`torf()`)\n\n- True or False? You can permute values in a vector using `sample()`. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\n### Longer MCQs (`longmcq()`)\n\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use `longmcq()` to deal with this. Since the answers are long, It's probably best to set up the options inside an R chunk with `echo=FALSE`. \n\n**What is a p-value?**\n\n\n::: {.cell}\n\n:::\n\n\n<div class='webex-radiogroup' id='radio_CCQNRNCZKM'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_CCQNRNCZKM\" value=\"\"></input> <span>the probability that the null hypothesis is true</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_CCQNRNCZKM\" value=\"answer\"></input> <span>the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_CCQNRNCZKM\" value=\"\"></input> <span>the probability of making an error in your conclusion</span></label></div>\n\n\n**What is true about a 95% confidence interval of the mean?**\n\n\n::: {.cell}\n\n:::\n\n\n<div class='webex-radiogroup' id='radio_JVTVFZJUUI'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_JVTVFZJUUI\" value=\"\"></input> <span>there is a 95% probability that the true mean lies within this range</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_JVTVFZJUUI\" value=\"\"></input> <span>95% of the data fall within this range</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_JVTVFZJUUI\" value=\"answer\"></input> <span>if you repeated the process many times, 95% of intervals calculated in this way contain the true mean</span></label></div>\n\n\n## Checked sections\n\nCreate sections with the class `webex-check` to add a button that hides feedback until it is pressed. Add the class `webex-box` to draw a box around the section (or use your own styles).\n\n::: {.webex-check .webex-box}\n\nI am going to learn a lot: <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\n\nWhat is a p-value? <div class='webex-radiogroup' id='radio_EHCXPBXMSJ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EHCXPBXMSJ\" value=\"\"></input> <span>the probability that the null hypothesis is true</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EHCXPBXMSJ\" value=\"answer\"></input> <span>the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EHCXPBXMSJ\" value=\"\"></input> <span>the probability of making an error in your conclusion</span></label></div>\n\n\n:::\n\n\n\n## Hidden solutions and hints\n\nYou can fence off a solution area that will be hidden behind a button using `hide()` before the solution and `unhide()` after, each as inline R code.  Pass the text you want to appear on the button to the `hide()` function.\n\nIf the solution is a code chunk, instead of using `hide()` and `unhide()`, simply set the `webex.hide` chunk option to TRUE, or set it to the string you wish to display on the button.\n\n**Recreate the scatterplot below, using the built-in `cars` dataset.**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](webexercises_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n<div class='webex-solution'><button>I need a hint</button>\n\n\nSee the documentation for `plot()` (`?plot`)\n\n\n</div>\n\n\n<!-- note: you could also just set webex.hide to TRUE -->\n\n\n::: {.cell webex.hide='Click here to see the solution'}\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n```{.r .cell-code}\nplot(cars$speed, cars$dist)\n```\n\n\n</div>\n:::\n",
    "supporting": [
      "webexercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}