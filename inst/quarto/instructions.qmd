# How to Use this Book {#sec-instructions}

## Setup {#sec-setup}


### Crossrefs {#sec-crossrefs}

Section links must start with `sec-` and look like this: @sec-snippets.

```{verbatim, lang = "md"}
## Section Title {#sec-section-title}

Internal links look like this: @sec-section-title
```

Figure links must start with `fig-` and look like this: @fig-poisson. 

```{r fig-poisson, echo = FALSE}
#| fig-cap: "A histogram of a Poisson distribution with lambda = 3"
hist(rpois(1000, lambda = 3))
```

Table links must start with `tbl-` and look like this: @tbl-authors. 

```{r tbl-authors, echo = FALSE}
#| tbl-cap: "The authors of this book"

data.frame(
  first_name = c("Lisa", "DaniÃ«l"),
  last_name = c("DeBruine", "Lakens")
)
```


See the [quarto documentation](https://quarto.org/docs/books/book-crossrefs.html){target="_blank"} for more information.

### References {#sec-refs}

Zotero export - keep updated


### Snippets {#sec-snippets}

Snippets in RStudio provide shortcuts to syntax. For example, in an RMarkdown document, type "r" and shift-tab to expand a code chunk.

You can add your own snippets. Under the **`Tools`** menu, choose **`Edit Code Snippets...`** and paste the following text into the end of the appropriate sections.

#### Markdown

```
snippet gls
	r glossary("${1:term}")
	
snippet gls2
	r glossary("${1:term}", "${2:display})
	
snippet h1
	# ${1:title} {#sec-${2:ref}}
	
snippet h2
	## ${1:title} {#sec-${2:ref}}
	
snippet h3
	### ${1:title} {#sec-${2:ref}}
	
snippet h4
	#### ${1:title} {#sec-${2:ref}}
	
snippet h5
	##### ${1:title} {#sec-${2:ref}}
```

### Customize

#### Page Footer

The default footer includes license YEAR, author, and github and twitter icons, but you can customize this in the _quarto.yml file under `page-footer:`. See  th e[quarto documentation](https://quarto.org/docs/reference/projects/websites.html#footer) for more options. See the available icons at <https://icons.getbootstrap.com/>.


## Layout {#sec-layout}

### Conventions {#sec-conventions}

This book will use the following conventions:

* Code: `list(number = 1, letter = "A")`
* File paths: <path>data/sales.csv</path>
* Menu/interface options: <if>Tools > Global Options... > Pane Layout</if>
* R Packages: <pkg>tidyverse</pkg>
* Glossary items: `r glossary("ordinal")`
* Citations: @usethis
* Internal links: @sec-conventions
* External links: [Mastering Shiny](https://mastering-shiny.org/){target="_blank"}
* Mac-specific: <mac>Cmd-Shift-F10</mac> 
* Windows-specific: <pc>Ctl-Shift-F10</pc>

A list of mac and windows [keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE).


### Figures {#sec-figures}

It is best practice to set a custom ggplot theme at the top of your script, then each subsequent plot will use that theme. Start with a built-in theme and then add any tweaks with the `theme()` function.

```{r}
library(ggplot2)

my_theme <- theme_minimal(base_size = 16) + 
            theme(panel.background = element_rect(fill = "red", 
                                                  color = "black", 
                                                  size = 5),
                  panel.grid = element_blank())
theme_set(my_theme)
```


```{r fig-diamonds}
#| fig-cap: "Demographic information of midwest counties from 2000 US census"
#| fig-asp: 1
ggplot(midwest, aes(popdensity, percollege)) +
  geom_point(alpha = 0.5) +
  labs(x = "Population Density", y = "Percent College Educated")
```

### Tables {#sec-tables}

Shorter tables and PDFs print using <pkg>kableExtra</pkg> and longer tables in HTML format use <pkg>DT</pkg> for interactive paged tables.

```{r tbl-short}
#| tbl-cap: "Shorter table"
head(beaver1)
```

```{r tbl-long}
#| tbl-cap: "Longer table"
DT::datatable(beaver1)
```

### Callout boxes {#sec-callout}

[See the [quarto reference](https://quarto.org/docs/authoring/callouts.html) for more options.]{.aside}

::: {.callout-note}
Informational asides.
:::

::: {.callout-note collapse="true"}
## Click to expand
Expanded!
:::

::: {.callout-tip}
Tips
:::

::: {.callout-warning}
Notes to warn you about something.
:::

::: {.callout-caution}
Notes about things that could cause serious errors.
:::

::: {.callout-important}
Notes about things that are important.
:::


### Code and Output {#sec-code-output}

```{r}
# code chunks
paste("Code", "Output", 1, sep = " ")
```

```{r, filename = "Filename or header"}
# code chunks with filename
a <- 1
```

```{r, eval = FALSE, verbatim="r, fig.width = 2, fig.height = 2"}
# code chunks with visible headers
hist(rnorm(100000))
```

```{verbatim, lang = "md"}
## Markdown Example

* Inline code: `r nrow(iris)`
* *Italics*
* **Bold**
* [Linked text](https://psyteachr.github.io)
```







### Fonts {#sec-fonts}




## Best Practices {#sec-best-practices}

### Glossary {#sec-glossary}

Look up a term from the glossary file with `glossary("alpha")`: `r glossary("alpha")`

Display a different value for the term with `glossary("alpha", "$\\alpha$")`: `r glossary("alpha", "$\\alpha$")`

Use an inline definition instead of the glossary file with `glossary("beta", def = "The second letter of the Greek alphabet")`: `r glossary("beta", def = "The second letter of the Greek alphabet")`

Just show the definition with `glossary("p-value", show_def = TRUE)`: `r glossary("p-value", show_def = TRUE)`

Show the table of terms defined on this page with `glossary_table()`:

```{r, echo = FALSE}
glossary_table()
```

